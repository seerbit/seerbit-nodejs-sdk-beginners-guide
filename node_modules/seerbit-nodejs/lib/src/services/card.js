"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getJsonResponse_1 = __importDefault(require("../helpers/getJsonResponse"));
const authorizePreAuth_1 = __importDefault(require("./resource/card/authorizePreAuth"));
const capturePreAuth_1 = __importDefault(require("./resource/card/capturePreAuth"));
const cancelPreAuth_1 = __importDefault(require("./resource/card/cancelPreAuth"));
const refundPreAuth_1 = __importDefault(require("./resource/card/refundPreAuth"));
const tokenizeCard_1 = __importDefault(require("./resource/card/tokenizeCard"));
const service_1 = __importDefault(require("../service"));
class Card extends service_1.default {
    constructor(client) {
        super(client);
        this._authorizePreAuth = new authorizePreAuth_1.default(this);
        this._capturePreAuth = new capturePreAuth_1.default(this);
        this._cancelPreAuth = new cancelPreAuth_1.default(this);
        this._refundPreAuth = new refundPreAuth_1.default(this);
        this._tokenizeCard = new tokenizeCard_1.default(this);
    }
    AuthorizePreAuth(requestPayload) {
        requestPayload.publicKey = this.client.config.publicKey;
        return getJsonResponse_1.default(this._authorizePreAuth, requestPayload, { isTokenRequired: true, isPost: true });
    }
    AuthorizePreAuthWithToken(requestPayload) {
        requestPayload.publicKey = this.client.config.publicKey;
        return getJsonResponse_1.default(this._authorizePreAuth, requestPayload, { isTokenRequired: true });
    }
    CapturePreAuth(requestPayload) {
        requestPayload.publicKey = this.client.config.publicKey;
        return getJsonResponse_1.default(this._capturePreAuth, requestPayload, { isTokenRequired: true });
    }
    CancelPreAuth(requestPayload) {
        requestPayload.publicKey = this.client.config.publicKey;
        return getJsonResponse_1.default(this._cancelPreAuth, requestPayload, { isTokenRequired: true });
    }
    RefundPreAuth(requestPayload) {
        requestPayload.publicKey = this.client.config.publicKey;
        return getJsonResponse_1.default(this._refundPreAuth, requestPayload, { isTokenRequired: true });
    }
    Tokenize(requestPayload) {
        requestPayload.publicKey = this.client.config.publicKey;
        return getJsonResponse_1.default(this._tokenizeCard, requestPayload, { isTokenRequired: true });
    }
}
exports.default = Card;
//# sourceMappingURL=card.js.map